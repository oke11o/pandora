// Code generated by mockery v2.22.1. DO NOT EDIT.

package httpscenario

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockStep is an autogenerated mock type for the Step type
type MockStep struct {
	mock.Mock
}

// GetBody provides a mock function with given fields:
func (_m *MockStep) GetBody() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetHeaders provides a mock function with given fields:
func (_m *MockStep) GetHeaders() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetMethod provides a mock function with given fields:
func (_m *MockStep) GetMethod() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockStep) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPostProcessors provides a mock function with given fields:
func (_m *MockStep) GetPostProcessors() []Postprocessor {
	ret := _m.Called()

	var r0 []Postprocessor
	if rf, ok := ret.Get(0).(func() []Postprocessor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Postprocessor)
		}
	}

	return r0
}

// GetSleep provides a mock function with given fields:
func (_m *MockStep) GetSleep() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetTag provides a mock function with given fields:
func (_m *MockStep) GetTag() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTemplater provides a mock function with given fields:
func (_m *MockStep) GetTemplater() Templater {
	ret := _m.Called()

	var r0 Templater
	if rf, ok := ret.Get(0).(func() Templater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Templater)
		}
	}

	return r0
}

// GetURL provides a mock function with given fields:
func (_m *MockStep) GetURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Preprocessor provides a mock function with given fields:
func (_m *MockStep) Preprocessor() Preprocessor {
	ret := _m.Called()

	var r0 Preprocessor
	if rf, ok := ret.Get(0).(func() Preprocessor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Preprocessor)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockStep interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStep creates a new instance of MockStep. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStep(t mockConstructorTestingTNewMockStep) *MockStep {
	mock := &MockStep{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.22.1. DO NOT EDIT.

package httpscenario

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockAmmo is an autogenerated mock type for the Ammo type
type MockAmmo struct {
	mock.Mock
}

// GetMinWaitingTime provides a mock function with given fields:
func (_m *MockAmmo) GetMinWaitingTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *MockAmmo) ID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockAmmo) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sources provides a mock function with given fields:
func (_m *MockAmmo) Sources() VariableStorage {
	ret := _m.Called()

	var r0 VariableStorage
	if rf, ok := ret.Get(0).(func() VariableStorage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(VariableStorage)
		}
	}

	return r0
}

// Steps provides a mock function with given fields:
func (_m *MockAmmo) Steps() []Step {
	ret := _m.Called()

	var r0 []Step
	if rf, ok := ret.Get(0).(func() []Step); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Step)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockAmmo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAmmo creates a new instance of MockAmmo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAmmo(t mockConstructorTestingTNewMockAmmo) *MockAmmo {
	mock := &MockAmmo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

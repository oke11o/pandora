// Code generated by mockery v2.22.1. DO NOT EDIT.

package httpscenario

import mock "github.com/stretchr/testify/mock"

// MockPreprocessor is an autogenerated mock type for the Preprocessor type
type MockPreprocessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: templateVars
func (_m *MockPreprocessor) Process(templateVars map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(templateVars)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(templateVars)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(templateVars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(templateVars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPreprocessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPreprocessor creates a new instance of MockPreprocessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPreprocessor(t mockConstructorTestingTNewMockPreprocessor) *MockPreprocessor {
	mock := &MockPreprocessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.22.1. DO NOT EDIT.

package httpscenario

import (
	io "io"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockPostprocessor is an autogenerated mock type for the Postprocessor type
type MockPostprocessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: requestVars, resp, body
func (_m *MockPostprocessor) Process(requestVars map[string]interface{}, resp *http.Response, body io.Reader) error {
	ret := _m.Called(requestVars, resp, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, *http.Response, io.Reader) error); ok {
		r0 = rf(requestVars, resp, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockPostprocessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPostprocessor creates a new instance of MockPostprocessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPostprocessor(t mockConstructorTestingTNewMockPostprocessor) *MockPostprocessor {
	mock := &MockPostprocessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
